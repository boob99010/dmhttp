/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.peter.mavenrunner;

import com.thoughtworks.xstream.XStream;
import java.io.File;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectInformation;
import org.netbeans.api.project.ui.OpenProjects;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
	dtd = "-//com.peter.mavenrunner//MavenRunner//EN",
	autostore = false
)
@TopComponent.Description(
	preferredID = "MavenRunnerTopComponent",
	iconBase = "com/peter/mavenrunner/mavenIcon.png",
	persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "com.peter.mavenrunner.MavenRunnerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
	displayName = "#CTL_MavenRunnerAction",
	preferredID = "MavenRunnerTopComponent"
)
@Messages({
    "CTL_MavenRunnerAction=MavenRunner",
    "CTL_MavenRunnerTopComponent=Maven runner",
    "HINT_MavenRunnerTopComponent=This is Maven runner"
})
public final class MavenRunnerTopComponent extends TopComponent {

    MyTreeNode root = new MyTreeNode("Projects", null, null, null);

    Hashtable<String, Vector<String>> data = new Hashtable<String, Vector<String>>();

    public MavenRunnerTopComponent() {
	initComponents();
	setName(Bundle.CTL_MavenRunnerTopComponent());
	setToolTipText(Bundle.HINT_MavenRunnerTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
     * Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treePopupMenu = new javax.swing.JPopupMenu();
        addGoalMenuItem = new javax.swing.JMenuItem();
        editGoalMenuItem = new javax.swing.JMenuItem();
        deleteGoalMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        refreshMenuItem = new javax.swing.JMenuItem();
        treePanel = new javax.swing.JPanel();
        treeScrollPane = new javax.swing.JScrollPane();
        projectTree = new javax.swing.JTree();
        controlPanel = new javax.swing.JPanel();
        treeExpandButton = new javax.swing.JButton();
        treeCollapseButton = new javax.swing.JButton();
        hideEmptyProjectToggleButton = new javax.swing.JToggleButton();
        searchTextField = new javax.swing.JTextField();

        addGoalMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peter/mavenrunner/add.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(addGoalMenuItem, org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.addGoalMenuItem.text")); // NOI18N
        addGoalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGoalMenuItemActionPerformed(evt);
            }
        });
        treePopupMenu.add(addGoalMenuItem);

        editGoalMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peter/mavenrunner/pencil.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(editGoalMenuItem, org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.editGoalMenuItem.text")); // NOI18N
        editGoalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGoalMenuItemActionPerformed(evt);
            }
        });
        treePopupMenu.add(editGoalMenuItem);

        deleteGoalMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peter/mavenrunner/cross.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteGoalMenuItem, org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.deleteGoalMenuItem.text")); // NOI18N
        deleteGoalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGoalMenuItemActionPerformed(evt);
            }
        });
        treePopupMenu.add(deleteGoalMenuItem);
        treePopupMenu.add(jSeparator1);

        refreshMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peter/mavenrunner/arrow_refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(refreshMenuItem, org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.refreshMenuItem.text")); // NOI18N
        refreshMenuItem.setToolTipText(org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.refreshMenuItem.toolTipText")); // NOI18N
        refreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMenuItemActionPerformed(evt);
            }
        });
        treePopupMenu.add(refreshMenuItem);

        setLayout(new java.awt.BorderLayout());

        treePanel.setLayout(new java.awt.BorderLayout());

        projectTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                projectTreeMouseClicked(evt);
            }
        });
        treeScrollPane.setViewportView(projectTree);

        treePanel.add(treeScrollPane, java.awt.BorderLayout.CENTER);

        add(treePanel, java.awt.BorderLayout.CENTER);

        controlPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        treeExpandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peter/mavenrunner/treeExpand.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(treeExpandButton, org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.treeExpandButton.text")); // NOI18N
        treeExpandButton.setPreferredSize(new java.awt.Dimension(26, 26));
        treeExpandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeExpandButtonActionPerformed(evt);
            }
        });
        controlPanel.add(treeExpandButton);

        treeCollapseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peter/mavenrunner/treeCollapse.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(treeCollapseButton, org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.treeCollapseButton.text")); // NOI18N
        treeCollapseButton.setPreferredSize(new java.awt.Dimension(26, 26));
        treeCollapseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeCollapseButtonActionPerformed(evt);
            }
        });
        controlPanel.add(treeCollapseButton);

        hideEmptyProjectToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/peter/mavenrunner/folder_delete.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(hideEmptyProjectToggleButton, org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.hideEmptyProjectToggleButton.text")); // NOI18N
        hideEmptyProjectToggleButton.setToolTipText(org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.hideEmptyProjectToggleButton.toolTipText")); // NOI18N
        hideEmptyProjectToggleButton.setPreferredSize(new java.awt.Dimension(26, 26));
        hideEmptyProjectToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideEmptyProjectToggleButtonActionPerformed(evt);
            }
        });
        controlPanel.add(hideEmptyProjectToggleButton);

        searchTextField.setText(org.openide.util.NbBundle.getMessage(MavenRunnerTopComponent.class, "MavenRunnerTopComponent.searchTextField.text")); // NOI18N
        searchTextField.setPreferredSize(new java.awt.Dimension(150, 26));
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        controlPanel.add(searchTextField);

        add(controlPanel, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void projectTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_projectTreeMouseClicked
//		InputOutput io = IOProvider.getDefault().getIO("MavenRunner", false);
//		io.getOut().println("projectTreeMouseClicked");

	if (SwingUtilities.isRightMouseButton(evt)) {
	    int row = projectTree.getClosestRowForLocation(evt.getX(), evt.getY());
	    projectTree.setSelectionRow(row);
	    MyTreeNode node = (MyTreeNode) projectTree.getSelectionPath().getLastPathComponent();
	    if (node.type.equals("project")) {
		addGoalMenuItem.setEnabled(true);
		editGoalMenuItem.setEnabled(false);
		deleteGoalMenuItem.setEnabled(false);
		treePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
	    } else if (node.type.equals("goal")) {
		addGoalMenuItem.setEnabled(false);
		editGoalMenuItem.setEnabled(true);
		deleteGoalMenuItem.setEnabled(true);
		treePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
	    }
	} else if (evt.getClickCount() == 2) {
	    if (projectTree.getSelectionPath() != null) {
		MyTreeNode node = (MyTreeNode) projectTree.getSelectionPath().getLastPathComponent();
//				io.getOut().println("node = " + node.type + ", " + node.project + ", " + node.projectInformation);
		if (node.type.equals("goal")) {
//					ProjectInformation projectInformation = node.projectInformation;
//					if (projectInformation != null && projectInformation.getDisplayName().equals("Peter-swing library")) {
		    try {
			ClassLoader syscl = Lookup.getDefault().lookup(ClassLoader.class);
			Class runUtils = syscl.loadClass("org.netbeans.modules.maven.api.execute.RunUtils");
			Class runConfig = syscl.loadClass("org.netbeans.modules.maven.api.execute.RunConfig");
			Method createRunConfig = runUtils.getMethod("createRunConfig", new Class[]{File.class, Project.class, String.class, List.class});
			List<String> list = new ArrayList<String>();
			String goalsStr[] = node.toString().split(" ");
			for (String goal : goalsStr) {
			    list.add(goal);
			}
			Object rc = createRunConfig.invoke(null,
				FileUtil.toFile(node.project.getProjectDirectory()),
				node.project, "Peter-swing library",
				list);
			Method executeMaven = runUtils.getMethod("executeMaven", new Class[]{runConfig});
			executeMaven.invoke(null, rc);
		    } catch (Exception ex) {
			ex.printStackTrace();
		    }
//					}
		}
	    }
	}
    }//GEN-LAST:event_projectTreeMouseClicked

    private void refreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMenuItemActionPerformed
	refreshTree(true);
    }//GEN-LAST:event_refreshMenuItemActionPerformed

    private void addGoalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGoalMenuItemActionPerformed
	TreePath path = projectTree.getSelectionPath();
	if (path == null) {
	    return;
	}

	String goals = JOptionPane.showInputDialog(null, "Please input maven goals", "Add", JOptionPane.QUESTION_MESSAGE);
	if (goals != null) {
	    MyTreeNode node = (MyTreeNode) ((MyTreeNode) path.getLastPathComponent());
	    MyTreeNode goalNode = new MyTreeNode(goals, "goal", node.project, node.projectInformation);
	    node.add(goalNode);
	    projectTree.updateUI();

	    String key = node.projectInformation.getDisplayName();
	    Vector<String> list = data.get(key);
	    if (list == null) {
		list = new Vector<String>();
		log("new list - " + key);
		data.put(key, list);
	    }
	    list.add(goals);
	    NbPreferences.forModule(this.getClass()).put("data", toString(data));
	}
    }//GEN-LAST:event_addGoalMenuItemActionPerformed

    private void editGoalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGoalMenuItemActionPerformed
	TreePath path = projectTree.getSelectionPath();
	if (path == null) {
	    return;
	}
	MyTreeNode node = (MyTreeNode) ((MyTreeNode) path.getLastPathComponent());
	if (node.type.equals("goal")) {
	    String goals = JOptionPane.showInputDialog(null, "Please input maven goals", "Edit", JOptionPane.QUESTION_MESSAGE);
	    if (goals != null) {
		String key = node.projectInformation.getDisplayName();
		Vector<String> list = data.get(key);
		if (list == null) {
		    list = new Vector<String>();
		    data.put(key, list);
		}
		int index = list.indexOf(node.getUserObject());
		list.remove(node.getUserObject());
		list.add(index, goals);

		node.setUserObject(goals);
		projectTree.updateUI();
		NbPreferences.forModule(this.getClass()).put("data", toString(data));
	    }
	}
    }//GEN-LAST:event_editGoalMenuItemActionPerformed

    private void deleteGoalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGoalMenuItemActionPerformed
	TreePath path = projectTree.getSelectionPath();
	if (path == null) {
	    return;
	}
	MyTreeNode node = (MyTreeNode) ((MyTreeNode) path.getLastPathComponent());
	if (node.type.equals("goal")) {
	    MyTreeNode parentNode = (MyTreeNode) node.getParent();
	    parentNode.remove(node);
	    projectTree.updateUI();

	    String key = node.projectInformation.getDisplayName();
	    Vector<String> list = data.get(key);
	    if (list == null) {
		list = new Vector<String>();
		data.put(key, list);
	    }
	    log("before delete " + list.size());
	    list.remove(node.getUserObject());
	    log("after delete " + list.size());
	    NbPreferences.forModule(this.getClass()).put("data", toString(data));
	}
    }//GEN-LAST:event_deleteGoalMenuItemActionPerformed

    private void treeExpandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeExpandButtonActionPerformed
	expandAll(projectTree, true);
    }//GEN-LAST:event_treeExpandButtonActionPerformed

    private void treeCollapseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeCollapseButtonActionPerformed
	expandAll(projectTree, false);
    }//GEN-LAST:event_treeCollapseButtonActionPerformed

    private void hideEmptyProjectToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideEmptyProjectToggleButtonActionPerformed
	refreshTree(!hideEmptyProjectToggleButton.isSelected());
    }//GEN-LAST:event_hideEmptyProjectToggleButtonActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
	refreshTree(!hideEmptyProjectToggleButton.isSelected());
    }//GEN-LAST:event_searchTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addGoalMenuItem;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JMenuItem deleteGoalMenuItem;
    private javax.swing.JMenuItem editGoalMenuItem;
    private javax.swing.JToggleButton hideEmptyProjectToggleButton;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTree projectTree;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton treeCollapseButton;
    private javax.swing.JButton treeExpandButton;
    private javax.swing.JPanel treePanel;
    private javax.swing.JPopupMenu treePopupMenu;
    private javax.swing.JScrollPane treeScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
	projectTree.setModel(new DefaultTreeModel(root));
	projectTree.setShowsRootHandles(true);
	projectTree.setRootVisible(false);
	projectTree.setCellRenderer(new MyTreeNodeRenderer());
	refreshTree(true);
    }

    @Override
    public void componentClosed() {
	// TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
	// better to version settings since initial version as advocated at
	// http://wiki.apidesign.org/wiki/PropertyFiles
//		try {
//			p.setProperty("data", toString(data));
//		} catch (Exception ex) {
//			ex.printStackTrace();
//		}
//
    }

    void readProperties(java.util.Properties p) {
//		try {
//			data = (Hashtable<String, Vector<String>>) fromString(p.getProperty("data"));
//		} catch (Exception ex) {
//			ex.printStackTrace();
//		}
//
    }

    void refreshTree(boolean showEmptyNode) {
	root.removeAllChildren();
	try {
	    for (Project p : OpenProjects.getDefault().getOpenProjects()) {
		ProjectInformation projectInformation = p.getLookup().lookup(ProjectInformation.class);
		MyTreeNode node = new MyTreeNode(projectInformation.getDisplayName(), "project", p, projectInformation);
		node.icon = projectInformation.getIcon();

		// load goals
		String key = node.projectInformation.getDisplayName();
		String value = NbPreferences.forModule(this.getClass()).get("data", null);
		data = (Hashtable<String, Vector<String>>) fromString(value);
		if (data == null) {
		    data = new Hashtable< String, Vector< String>>();
		    log("create new data");
		}
		if (data.get(key) == null) {
		    data.put(key, new Vector<String>());
		    log("add " + key + " to data");
		}

		Vector<String> goals = data.get(key);
		if (goals != null) {
		    for (String goal : goals) {
			String searchString = searchTextField.getText().trim();
			if (searchString.equals("") || goal.toLowerCase().contains(searchString)) {
			    MyTreeNode goalsNode = new MyTreeNode(goal, "goal", p, projectInformation);
			    node.add(goalsNode);
			}
		    }
		}
		// load goals end

		if (showEmptyNode) {
		    root.add(node);
		} else {
		    if (node.getChildCount() > 0) {
			root.add(node);
		    }
		}
	    }
	} catch (Exception ex) {
	    ex.printStackTrace();
	}
	projectTree.updateUI();
	expandAll(projectTree, true);
    }

    public static void expandAll(JTree tree, boolean expand) {
	expandAll(tree, expand, -1);
    }

    public static void expandAll(JTree tree, boolean expand, int maxLevel) {
	TreeNode root = (TreeNode) tree.getModel().getRoot();
	if (root != null) {
	    expandAll(tree, new TreePath(root), expand, maxLevel, 0);
	    tree.expandPath(new TreePath(root));
	}
    }

    private static void expandAll(JTree tree, TreePath treePath, boolean expand, int maxLevel, int currentLevel) {
	if (maxLevel != -1 && currentLevel >= maxLevel - 1) {
	    return;
	}

	TreeNode node = (TreeNode) treePath.getLastPathComponent();
	if (node.getChildCount() >= 0) {
	    for (Enumeration e = node.children(); e.hasMoreElements();) {
		TreeNode n = (TreeNode) e.nextElement();

		TreePath path = treePath.pathByAddingChild(n);
		expandAll(tree, path, expand, maxLevel, currentLevel + 1);
	    }
	}

	// Expansion or collapse must be done bottom-up
	if (expand) {
	    tree.expandPath(treePath);
	} else {
	    tree.collapsePath(treePath);
	}
    }

    @Override
    public int getPersistenceType() {
	return TopComponent.PERSISTENCE_ALWAYS;
    }

    private Hashtable<String, Vector<String>> fromString(String s) {
	try {
	    XStream xstream = new XStream();
	    return (Hashtable<String, Vector<String>>) xstream.fromXML(s);
	} catch (Exception ex) {
	    ex.printStackTrace();
	    return null;
	}
    }

    /**
     * Write the object to a Base64 string.
     */
    private String toString(Hashtable<String, Vector<String>> o) {
	XStream xstream = new XStream();
	return xstream.toXML(o);
    }

    private void log(String str) {
	InputOutput io = IOProvider.getDefault().getIO("MavenRunner", false);
	io.getOut().println(str);
    }
    /*
     @Override
     public void writeExternal(ObjectOutput oo) throws IOException {
     super.writeExternal(oo);
     InputOutput io = IOProvider.getDefault().getIO("MavenRunner", false);
     io.getOut().println("----- writeExternal");
     Object toWrite = new NbMarshalledObject(data);
     oo.writeObject(toWrite);
     }

     @Override
     public void readExternal(ObjectInput oi) throws IOException, ClassNotFoundException {
     super.readExternal(oi);
     InputOutput io = IOProvider.getDefault().getIO("MavenRunner", false);
     io.getOut().println("----- readExternal");
     NbMarshalledObject obj = (NbMarshalledObject) oi.readObject();
     data = (Hashtable<String, Vector<String>>) obj.get();
     }

     */
}
